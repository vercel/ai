// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`streamText > multiple stream consumption > should support text stream, ai stream, full stream on single result object 1`] = `
{
  "dataStream": [
    "f:{"messageId":"msg-0"}
",
    "0:"Hello"
",
    "0:", "
",
    "0:"world!"
",
    "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
    "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
  ],
  "fullStream": [
    {
      "messageId": "msg-0",
      "request": {},
      "type": "step-start",
      "warnings": [],
    },
    {
      "textDelta": "Hello",
      "type": "text-delta",
    },
    {
      "textDelta": ", ",
      "type": "text-delta",
    },
    {
      "textDelta": "world!",
      "type": "text-delta",
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "messageId": "msg-0",
      "providerMetadata": undefined,
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "type": "step-finish",
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "finishReason": "stop",
      "logprobs": undefined,
      "providerMetadata": undefined,
      "response": {
        "headers": undefined,
        "id": "id-0",
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "type": "finish",
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
    },
  ],
  "textStream": [
    "Hello",
    ", ",
    "world!",
  ],
}
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > callbacks > onFinish should send correct information 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": {
      "call": "2",
    },
    "id": "id-1",
    "messages": [
      {
        "content": [
          {
            "text": "thinking",
            "type": "reasoning",
          },
          {
            "text": "",
            "type": "text",
          },
          {
            "args": {
              "value": "value",
            },
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-call",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
      {
        "content": [
          {
            "result": "result1",
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-result",
          },
        ],
        "id": "msg-3",
        "role": "tool",
      },
      {
        "content": [
          {
            "text": "Hello, world!",
            "type": "text",
          },
        ],
        "id": "msg-2",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:01.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "tool-calls",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": "thinking",
      "reasoningDetails": [
        {
          "text": "thinking",
          "type": "text",
        },
      ],
      "request": {},
      "response": {
        "headers": {
          "call": "1",
        },
        "id": "id-0",
        "messages": [
          {
            "content": [
              {
                "text": "thinking",
                "type": "reasoning",
              },
              {
                "text": "",
                "type": "text",
              },
              {
                "args": {
                  "value": "value",
                },
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-call",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
          {
            "content": [
              {
                "result": "result1",
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-result",
              },
            ],
            "id": "msg-3",
            "role": "tool",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "",
      "toolCalls": [
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "toolResults": [
        {
          "args": {
            "value": "value",
          },
          "result": "result1",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": {
          "call": "2",
        },
        "id": "id-1",
        "messages": [
          {
            "content": [
              {
                "text": "thinking",
                "type": "reasoning",
              },
              {
                "text": "",
                "type": "text",
              },
              {
                "args": {
                  "value": "value",
                },
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-call",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
          {
            "content": [
              {
                "result": "result1",
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-result",
              },
            ],
            "id": "msg-3",
            "role": "tool",
          },
          {
            "content": [
              {
                "text": "Hello, world!",
                "type": "text",
              },
            ],
            "id": "msg-2",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "sources": [],
      "stepType": "tool-result",
      "text": "Hello, world!",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 5,
        "promptTokens": 1,
        "totalTokens": 6,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello, world!",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 15,
    "promptTokens": 4,
    "totalTokens": 19,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > callbacks > onStepFinish should send correct information 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": "thinking",
    "reasoningDetails": [
      {
        "text": "thinking",
        "type": "text",
      },
    ],
    "request": {},
    "response": {
      "headers": {
        "call": "1",
      },
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "thinking",
              "type": "reasoning",
            },
            {
              "text": "",
              "type": "text",
            },
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "id": "msg-3",
          "role": "tool",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "",
    "toolCalls": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "toolResults": [
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "2",
      },
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "text": "thinking",
              "type": "reasoning",
            },
            {
              "text": "",
              "type": "text",
            },
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "id": "msg-3",
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "id": "msg-2",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [],
    "stepType": "tool-result",
    "text": "Hello, world!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > should contain assistant response message and tool message from all steps 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "thinking",
    "type": "reasoning",
  },
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "result1",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": {
        "call": "1",
      },
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "messageId": "msg-2",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "Hello, ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-2",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": {
        "call": "2",
      },
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": {
        "call": "2",
      },
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 15,
      "promptTokens": 4,
      "totalTokens": 19,
    },
  },
]
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > should record telemetry data for each step 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 3,
      "ai.usage.completionTokens": 15,
      "ai.usage.promptTokens": 4,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.prompt.toolChoice": "{"type":"auto"}",
      "ai.prompt.tools": [
        "{"type":"function","name":"tool1","parameters":{"type":"object","properties":{"value":{"type":"string"}},"required":["value"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}",
      ],
      "ai.response.avgCompletionTokensPerSecond": 20,
      "ai.response.finishReason": "tool-calls",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "tool-calls",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""result1"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"reasoning","text":"thinking"},{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]},{"role":"tool","content":[{"type":"tool-result","toolCallId":"call-1","toolName":"tool1","result":"result1"}]}]",
      "ai.prompt.toolChoice": "{"type":"auto"}",
      "ai.prompt.tools": [
        "{"type":"function","name":"tool1","parameters":{"type":"object","properties":{"value":{"type":"string"}},"required":["value"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}",
      ],
      "ai.response.avgCompletionTokensPerSecond": 12.5,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-1",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 400,
      "ai.response.msToFirstChunk": 400,
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 5,
      "ai.usage.promptTokens": 1,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-1",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 1,
      "gen_ai.usage.output_tokens": 5,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 400,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > value promises > result.response.messages should contain response messages from all steps 1`] = `
[
  {
    "content": [
      {
        "text": "thinking",
        "type": "reasoning",
      },
      {
        "text": "",
        "type": "text",
      },
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "id": "msg-0",
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "id": "msg-3",
    "role": "tool",
  },
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "id": "msg-2",
    "role": "assistant",
  },
]
`;

exports[`streamText > options.maxSteps > 2 steps: initial, tool-result > value promises > result.steps should contain all steps 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": "thinking",
    "reasoningDetails": [
      {
        "text": "thinking",
        "type": "text",
      },
    ],
    "request": {},
    "response": {
      "headers": {
        "call": "1",
      },
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "thinking",
              "type": "reasoning",
            },
            {
              "text": "",
              "type": "text",
            },
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "id": "msg-3",
          "role": "tool",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "",
    "toolCalls": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "toolResults": [
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "2",
      },
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "text": "thinking",
              "type": "reasoning",
            },
            {
              "text": "",
              "type": "text",
            },
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "id": "msg-3",
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "id": "msg-2",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [],
    "stepType": "tool-result",
    "text": "Hello, world!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 1,
      "totalTokens": 6,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > callbacks > onFinish should send correct information 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": {
      "call": "3",
    },
    "id": "id-3",
    "messages": [
      {
        "content": [
          {
            "text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
            "type": "text",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:01.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "length",
      "isContinued": true,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-0",
        "messages": [
          {
            "content": [
              {
                "text": "part 1 
 ",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "part 1 
 ",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 20,
        "promptTokens": 10,
        "totalTokens": 30,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "length",
      "isContinued": true,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-1",
        "messages": [
          {
            "content": [
              {
                "text": "part 1 
 no-whitespace",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "sources": [
        {
          "id": "123",
          "providerMetadata": {
            "provider": {
              "custom": "value",
            },
          },
          "sourceType": "url",
          "title": "Example",
          "url": "https://example.com",
        },
      ],
      "stepType": "continue",
      "text": "no-whitespace",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 5,
        "promptTokens": 30,
        "totalTokens": 35,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "length",
      "isContinued": true,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": {
          "call": "3",
        },
        "id": "id-2",
        "messages": [
          {
            "content": [
              {
                "text": "part 1 
 no-whitespaceimmediatefollow  ",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "sources": [
        {
          "id": "456",
          "providerMetadata": {
            "provider": {
              "custom": "value2",
            },
          },
          "sourceType": "url",
          "title": "Example 2",
          "url": "https://example.com/2",
        },
        {
          "id": "789",
          "providerMetadata": {
            "provider": {
              "custom": "value3",
            },
          },
          "sourceType": "url",
          "title": "Example 3",
          "url": "https://example.com/3",
        },
      ],
      "stepType": "continue",
      "text": "immediatefollow  ",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 2,
        "promptTokens": 3,
        "totalTokens": 5,
      },
      "warnings": undefined,
    },
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": {
          "call": "3",
        },
        "id": "id-3",
        "messages": [
          {
            "content": [
              {
                "text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:01.000Z,
      },
      "sources": [],
      "stepType": "continue",
      "text": "final value keep all whitespace
 end",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 2,
        "promptTokens": 3,
        "totalTokens": 5,
      },
      "warnings": undefined,
    },
  ],
  "text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 29,
    "promptTokens": 46,
    "totalTokens": 75,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > callbacks > onStepFinish should send correct information 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 ",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "part 1 
 ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 20,
      "promptTokens": 10,
      "totalTokens": 30,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespace",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [
      {
        "id": "123",
        "providerMetadata": {
          "provider": {
            "custom": "value",
          },
        },
        "sourceType": "url",
        "title": "Example",
        "url": "https://example.com",
      },
    ],
    "stepType": "continue",
    "text": "no-whitespace",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 30,
      "totalTokens": 35,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-2",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespaceimmediatefollow  ",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [
      {
        "id": "456",
        "providerMetadata": {
          "provider": {
            "custom": "value2",
          },
        },
        "sourceType": "url",
        "title": "Example 2",
        "url": "https://example.com/2",
      },
      {
        "id": "789",
        "providerMetadata": {
          "provider": {
            "custom": "value3",
          },
        },
        "sourceType": "url",
        "title": "Example 3",
        "url": "https://example.com/3",
      },
    ],
    "stepType": "continue",
    "text": "immediatefollow  ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-3",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [],
    "stepType": "continue",
    "text": "final value keep all whitespace
 end",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > result.sources should contain sources from all steps 1`] = `
[
  {
    "id": "123",
    "providerMetadata": {
      "provider": {
        "custom": "value",
      },
    },
    "sourceType": "url",
    "title": "Example",
    "url": "https://example.com",
  },
  {
    "id": "456",
    "providerMetadata": {
      "provider": {
        "custom": "value2",
      },
    },
    "sourceType": "url",
    "title": "Example 2",
    "url": "https://example.com/2",
  },
  {
    "id": "789",
    "providerMetadata": {
      "provider": {
        "custom": "value3",
      },
    },
    "sourceType": "url",
    "title": "Example 3",
    "url": "https://example.com/3",
  },
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > should contain text deltas from all steps 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "part ",
    "type": "text-delta",
  },
  {
    "textDelta": "1 
",
    "type": "text-delta",
  },
  {
    "textDelta": " ",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 20,
      "promptTokens": 10,
      "totalTokens": 30,
    },
    "warnings": undefined,
  },
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "source": {
      "id": "123",
      "providerMetadata": {
        "provider": {
          "custom": "value",
        },
      },
      "sourceType": "url",
      "title": "Example",
      "url": "https://example.com",
    },
    "type": "source",
  },
  {
    "textDelta": "no-whitespace",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 5,
      "promptTokens": 30,
      "totalTokens": 35,
    },
    "warnings": undefined,
  },
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "source": {
      "id": "456",
      "providerMetadata": {
        "provider": {
          "custom": "value2",
        },
      },
      "sourceType": "url",
      "title": "Example 2",
      "url": "https://example.com/2",
    },
    "type": "source",
  },
  {
    "textDelta": "immediatefollow  ",
    "type": "text-delta",
  },
  {
    "source": {
      "id": "789",
      "providerMetadata": {
        "provider": {
          "custom": "value3",
        },
      },
      "sourceType": "url",
      "title": "Example 3",
      "url": "https://example.com/3",
    },
    "type": "source",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-2",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "final ",
    "type": "text-delta",
  },
  {
    "textDelta": "value keep all ",
    "type": "text-delta",
  },
  {
    "textDelta": "whitespace
 ",
    "type": "text-delta",
  },
  {
    "textDelta": "end",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-3",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-3",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 29,
      "promptTokens": 46,
      "totalTokens": 75,
    },
  },
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > should generate correct data stream 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"part "
",
  "0:"1 \\n"
",
  "0:" "
",
  "e:{"finishReason":"length","usage":{"promptTokens":10,"completionTokens":20},"isContinued":true}
",
  "f:{"messageId":"msg-0"}
",
  "0:"no-whitespace"
",
  "e:{"finishReason":"length","usage":{"promptTokens":30,"completionTokens":5},"isContinued":true}
",
  "f:{"messageId":"msg-0"}
",
  "0:"immediatefollow  "
",
  "e:{"finishReason":"length","usage":{"promptTokens":3,"completionTokens":2},"isContinued":true}
",
  "f:{"messageId":"msg-0"}
",
  "0:"final "
",
  "0:"value keep all "
",
  "0:"whitespace\\n "
",
  "0:"end"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":2},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":46,"completionTokens":29}}
",
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > should record telemetry data for each step 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 5,
      "ai.usage.completionTokens": 29,
      "ai.usage.promptTokens": 46,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "length",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "part 1 
 ",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "length",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"text","text":"part 1 \\n "}]}]",
      "ai.response.avgCompletionTokensPerSecond": 12.5,
      "ai.response.finishReason": "length",
      "ai.response.id": "id-1",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 400,
      "ai.response.msToFirstChunk": 400,
      "ai.response.text": "no-whitespace",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 5,
      "ai.usage.promptTokens": 30,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "length",
      ],
      "gen_ai.response.id": "id-1",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 30,
      "gen_ai.usage.output_tokens": 5,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 400,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"text","text":"part 1 \\n "},{"type":"text","text":"no-whitespace"}]}]",
      "ai.response.avgCompletionTokensPerSecond": Infinity,
      "ai.response.finishReason": "length",
      "ai.response.id": "id-2",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 0,
      "ai.response.msToFirstChunk": 0,
      "ai.response.text": "immediatefollow  ",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 2,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "length",
      ],
      "gen_ai.response.id": "id-2",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 2,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 0,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "messages",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]},{"role":"assistant","content":[{"type":"text","text":"part 1 \\n "},{"type":"text","text":"no-whitespace"},{"type":"text","text":"immediatefollow  "}]}]",
      "ai.response.avgCompletionTokensPerSecond": Infinity,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-3",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 0,
      "ai.response.msToFirstChunk": 0,
      "ai.response.text": "final value keep all whitespace
 end",
      "ai.response.timestamp": "1970-01-01T00:00:01.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 2,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-3",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 2,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 0,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`streamText > options.maxSteps > 4 steps: initial, continue, continue, continue > value promises > result.steps should contain all steps 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 ",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "part 1 
 ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 20,
      "promptTokens": 10,
      "totalTokens": 30,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespace",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [
      {
        "id": "123",
        "providerMetadata": {
          "provider": {
            "custom": "value",
          },
        },
        "sourceType": "url",
        "title": "Example",
        "url": "https://example.com",
      },
    ],
    "stepType": "continue",
    "text": "no-whitespace",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 5,
      "promptTokens": 30,
      "totalTokens": 35,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "length",
    "isContinued": true,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-2",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespaceimmediatefollow  ",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [
      {
        "id": "456",
        "providerMetadata": {
          "provider": {
            "custom": "value2",
          },
        },
        "sourceType": "url",
        "title": "Example 2",
        "url": "https://example.com/2",
      },
      {
        "id": "789",
        "providerMetadata": {
          "provider": {
            "custom": "value3",
          },
        },
        "sourceType": "url",
        "title": "Example 3",
        "url": "https://example.com/3",
      },
    ],
    "stepType": "continue",
    "text": "immediatefollow  ",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": {
        "call": "3",
      },
      "id": "id-3",
      "messages": [
        {
          "content": [
            {
              "text": "part 1 
 no-whitespaceimmediatefollow  final value keep all whitespace
 end",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:01.000Z,
    },
    "sources": [],
    "stepType": "continue",
    "text": "final value keep all whitespace
 end",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 2,
      "promptTokens": 3,
      "totalTokens": 5,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > options.onChunk > should return events in order 1`] = `
[
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-call-streaming-start",
  },
  {
    "argsTextDelta": "{"value": "",
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-call-delta",
  },
  {
    "textDelta": "Feeling clever",
    "type": "reasoning",
  },
  {
    "argsTextDelta": "test",
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": ""}",
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-call-delta",
  },
  {
    "source": {
      "id": "123",
      "providerMetadata": {
        "provider": {
          "custom": "value",
        },
      },
      "sourceType": "url",
      "title": "Example",
      "url": "https://example.com",
    },
    "type": "source",
  },
  {
    "args": {
      "value": "test",
    },
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "test",
    },
    "result": "test-result",
    "toolCallId": "1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "textDelta": " World",
    "type": "text-delta",
  },
]
`;

exports[`streamText > options.onFinish > should send correct information 1`] = `
{
  "experimental_providerMetadata": {
    "testProvider": {
      "testKey": "testValue",
    },
  },
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": {
    "testProvider": {
      "testKey": "testValue",
    },
  },
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": {
      "call": "2",
    },
    "id": "id-0",
    "messages": [
      {
        "content": [
          {
            "text": "Hello, world!",
            "type": "text",
          },
          {
            "args": {
              "value": "value",
            },
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-call",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
      {
        "content": [
          {
            "result": "value-result",
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-result",
          },
        ],
        "id": "msg-1",
        "role": "tool",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": {
        "testProvider": {
          "testKey": "testValue",
        },
      },
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": {
        "testProvider": {
          "testKey": "testValue",
        },
      },
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": {
          "call": "2",
        },
        "id": "id-0",
        "messages": [
          {
            "content": [
              {
                "text": "Hello, world!",
                "type": "text",
              },
              {
                "args": {
                  "value": "value",
                },
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-call",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
          {
            "content": [
              {
                "result": "value-result",
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-result",
              },
            ],
            "id": "msg-1",
            "role": "tool",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "Hello, world!",
      "toolCalls": [
        {
          "args": {
            "value": "value",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "toolResults": [
        {
          "args": {
            "value": "value",
          },
          "result": "value-result",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello, world!",
  "toolCalls": [
    {
      "args": {
        "value": "value",
      },
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-call",
    },
  ],
  "toolResults": [
    {
      "args": {
        "value": "value",
      },
      "result": "value-result",
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-result",
    },
  ],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.onFinish > should send files 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [
    DefaultGeneratedFileWithType {
      "base64Data": "Hello World",
      "mimeType": "text/plain",
      "type": "file",
      "uint8ArrayData": undefined,
    },
    DefaultGeneratedFileWithType {
      "base64Data": "QkFVRw==",
      "mimeType": "image/jpeg",
      "type": "file",
      "uint8ArrayData": undefined,
    },
  ],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": undefined,
    "id": "id-1",
    "messages": [
      {
        "content": [
          {
            "data": "Hello World",
            "mimeType": "text/plain",
            "type": "file",
          },
          {
            "data": "QkFVRw==",
            "mimeType": "image/jpeg",
            "type": "file",
          },
          {
            "text": "Hello!",
            "type": "text",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "files": [
        DefaultGeneratedFileWithType {
          "base64Data": "Hello World",
          "mimeType": "text/plain",
          "type": "file",
          "uint8ArrayData": undefined,
        },
        DefaultGeneratedFileWithType {
          "base64Data": "QkFVRw==",
          "mimeType": "image/jpeg",
          "type": "file",
          "uint8ArrayData": undefined,
        },
      ],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-1",
        "messages": [
          {
            "content": [
              {
                "data": "Hello World",
                "mimeType": "text/plain",
                "type": "file",
              },
              {
                "data": "QkFVRw==",
                "mimeType": "image/jpeg",
                "type": "file",
              },
              {
                "text": "Hello!",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "Hello!",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello!",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.onFinish > should send sources 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": undefined,
    "id": "id-1",
    "messages": [
      {
        "content": [
          {
            "text": "Hello!",
            "type": "text",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [
    {
      "id": "123",
      "providerMetadata": {
        "provider": {
          "custom": "value",
        },
      },
      "sourceType": "url",
      "title": "Example",
      "url": "https://example.com",
    },
    {
      "id": "456",
      "providerMetadata": {
        "provider": {
          "custom": "value2",
        },
      },
      "sourceType": "url",
      "title": "Example 2",
      "url": "https://example.com/2",
    },
  ],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-1",
        "messages": [
          {
            "content": [
              {
                "text": "Hello!",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [
        {
          "id": "123",
          "providerMetadata": {
            "provider": {
              "custom": "value",
            },
          },
          "sourceType": "url",
          "title": "Example",
          "url": "https://example.com",
        },
        {
          "id": "456",
          "providerMetadata": {
            "provider": {
              "custom": "value2",
            },
          },
          "sourceType": "url",
          "title": "Example 2",
          "url": "https://example.com/2",
        },
      ],
      "stepType": "initial",
      "text": "Hello!",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "Hello!",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.output > object output > should call onFinish with the correct content 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": undefined,
    "id": "id-1",
    "messages": [
      {
        "content": [
          {
            "text": "{ "value": "Hello, world!" }",
            "type": "text",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": undefined,
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": undefined,
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": undefined,
        "id": "id-1",
        "messages": [
          {
            "content": [
              {
                "text": "{ "value": "Hello, world!" }",
                "type": "text",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "{ "value": "Hello, world!" }",
      "toolCalls": [],
      "toolResults": [],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "{ "value": "Hello, world!" }",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.transform > with base transformation > options.onFinish should receive transformed data 1`] = `
{
  "experimental_providerMetadata": {
    "testProvider": {
      "testKey": "TEST VALUE",
    },
  },
  "files": [],
  "finishReason": "stop",
  "logprobs": undefined,
  "providerMetadata": {
    "testProvider": {
      "testKey": "TEST VALUE",
    },
  },
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": {
      "call": "2",
    },
    "id": "id-0",
    "messages": [
      {
        "content": [
          {
            "text": "HELLO, WORLD!",
            "type": "text",
          },
          {
            "args": {
              "value": "VALUE",
            },
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-call",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
      {
        "content": [
          {
            "result": "VALUE-RESULT",
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-result",
          },
        ],
        "id": "msg-1",
        "role": "tool",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "steps": [
    {
      "experimental_providerMetadata": {
        "testProvider": {
          "testKey": "TEST VALUE",
        },
      },
      "files": [],
      "finishReason": "stop",
      "isContinued": false,
      "logprobs": undefined,
      "providerMetadata": {
        "testProvider": {
          "testKey": "TEST VALUE",
        },
      },
      "reasoning": undefined,
      "reasoningDetails": [],
      "request": {},
      "response": {
        "headers": {
          "call": "2",
        },
        "id": "id-0",
        "messages": [
          {
            "content": [
              {
                "text": "HELLO, WORLD!",
                "type": "text",
              },
              {
                "args": {
                  "value": "VALUE",
                },
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-call",
              },
            ],
            "id": "msg-0",
            "role": "assistant",
          },
          {
            "content": [
              {
                "result": "VALUE-RESULT",
                "toolCallId": "call-1",
                "toolName": "tool1",
                "type": "tool-result",
              },
            ],
            "id": "msg-1",
            "role": "tool",
          },
        ],
        "modelId": "mock-model-id",
        "timestamp": 1970-01-01T00:00:00.000Z,
      },
      "sources": [],
      "stepType": "initial",
      "text": "HELLO, WORLD!",
      "toolCalls": [
        {
          "args": {
            "value": "VALUE",
          },
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-call",
        },
      ],
      "toolResults": [
        {
          "args": {
            "value": "VALUE",
          },
          "result": "VALUE-RESULT",
          "toolCallId": "call-1",
          "toolName": "tool1",
          "type": "tool-result",
        },
      ],
      "usage": {
        "completionTokens": 10,
        "promptTokens": 3,
        "totalTokens": 13,
      },
      "warnings": undefined,
    },
  ],
  "text": "HELLO, WORLD!",
  "toolCalls": [
    {
      "args": {
        "value": "VALUE",
      },
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-call",
    },
  ],
  "toolResults": [
    {
      "args": {
        "value": "VALUE",
      },
      "result": "VALUE-RESULT",
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-result",
    },
  ],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.transform > with base transformation > options.onStepFinish should receive transformed data 1`] = `
{
  "experimental_providerMetadata": {
    "testProvider": {
      "testKey": "TEST VALUE",
    },
  },
  "files": [],
  "finishReason": "stop",
  "isContinued": false,
  "logprobs": undefined,
  "providerMetadata": {
    "testProvider": {
      "testKey": "TEST VALUE",
    },
  },
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "headers": {
      "call": "2",
    },
    "id": "id-0",
    "messages": [
      {
        "content": [
          {
            "text": "HELLO, WORLD!",
            "type": "text",
          },
          {
            "args": {
              "value": "VALUE",
            },
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-call",
          },
        ],
        "id": "msg-0",
        "role": "assistant",
      },
      {
        "content": [
          {
            "result": "VALUE-RESULT",
            "toolCallId": "call-1",
            "toolName": "tool1",
            "type": "tool-result",
          },
        ],
        "id": "msg-1",
        "role": "tool",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "stepType": "initial",
  "text": "HELLO, WORLD!",
  "toolCalls": [
    {
      "args": {
        "value": "VALUE",
      },
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-call",
    },
  ],
  "toolResults": [
    {
      "args": {
        "value": "VALUE",
      },
      "result": "VALUE-RESULT",
      "toolCallId": "call-1",
      "toolName": "tool1",
      "type": "tool-result",
    },
  ],
  "usage": {
    "completionTokens": 10,
    "promptTokens": 3,
    "totalTokens": 13,
  },
  "warnings": undefined,
}
`;

exports[`streamText > options.transform > with base transformation > result.steps should be transformed 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "HELLO, WORLD!",
              "type": "text",
            },
            {
              "args": {
                "value": "VALUE",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "RESULT1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "id": "msg-1",
          "role": "tool",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "HELLO, WORLD!",
    "toolCalls": [
      {
        "args": {
          "value": "VALUE",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "toolResults": [
      {
        "args": {
          "value": "VALUE",
        },
        "result": "RESULT1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > options.transform > with base transformation > telemetry should record transformed data when enabled 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "HELLO, WORLD!",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"VALUE"}}]",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.prompt.toolChoice": "{"type":"auto"}",
      "ai.prompt.tools": [
        "{"type":"function","name":"tool1","parameters":{"type":"object","properties":{"value":{"type":"string"}},"required":["value"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}",
      ],
      "ai.response.avgCompletionTokensPerSecond": 20,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"VALUE"}}]",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""value-result"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`streamText > options.transform > with transformation that aborts stream > options.onStepFinish should be called 1`] = `
{
  "experimental_providerMetadata": undefined,
  "files": [],
  "finishReason": "stop",
  "isContinued": false,
  "logprobs": undefined,
  "providerMetadata": undefined,
  "reasoning": undefined,
  "reasoningDetails": [],
  "request": {},
  "response": {
    "id": "response-id",
    "messages": [
      {
        "content": [
          {
            "text": "Hello, ",
            "type": "text",
          },
        ],
        "id": "msg-transformed-123",
        "role": "assistant",
      },
    ],
    "modelId": "mock-model-id",
    "timestamp": 1970-01-01T00:00:00.000Z,
  },
  "sources": [],
  "stepType": "initial",
  "text": "Hello, ",
  "toolCalls": [],
  "toolResults": [],
  "usage": {
    "completionTokens": NaN,
    "promptTokens": NaN,
    "totalTokens": NaN,
  },
  "warnings": [],
}
`;

exports[`streamText > result.files > should contain files 1`] = `
[
  DefaultGeneratedFileWithType {
    "base64Data": "Hello World",
    "mimeType": "text/plain",
    "type": "file",
    "uint8ArrayData": undefined,
  },
  DefaultGeneratedFileWithType {
    "base64Data": "QkFVRw==",
    "mimeType": "image/jpeg",
    "type": "file",
    "uint8ArrayData": undefined,
  },
]
`;

exports[`streamText > result.fullStream > should filter out empty text deltas 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should not send tool call deltas when toolCallStreaming is disabled 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "args": {
      "value": "Sparkle Day",
    },
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send delayed asynchronous tool results 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "value-result",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send files 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  DefaultGeneratedFileWithType {
    "base64Data": "Hello World",
    "mimeType": "text/plain",
    "type": "file",
    "uint8ArrayData": undefined,
  },
  {
    "textDelta": "Hello!",
    "type": "text-delta",
  },
  DefaultGeneratedFileWithType {
    "base64Data": "QkFVRw==",
    "mimeType": "image/jpeg",
    "type": "file",
    "uint8ArrayData": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send reasoning deltas 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "I will open the conversation",
    "type": "reasoning",
  },
  {
    "textDelta": " with witty banter. ",
    "type": "reasoning",
  },
  {
    "signature": "1234567890",
    "type": "reasoning-signature",
  },
  {
    "data": "redacted-reasoning-data",
    "type": "redacted-reasoning",
  },
  {
    "textDelta": "Once the user has relaxed,",
    "type": "reasoning",
  },
  {
    "textDelta": " I will pry for valuable information.",
    "type": "reasoning",
  },
  {
    "signature": "1234567890",
    "type": "reasoning-signature",
  },
  {
    "textDelta": "Hi",
    "type": "text-delta",
  },
  {
    "textDelta": " there!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send sources 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "source": {
      "id": "123",
      "providerMetadata": {
        "provider": {
          "custom": "value",
        },
      },
      "sourceType": "url",
      "title": "Example",
      "url": "https://example.com",
    },
    "type": "source",
  },
  {
    "textDelta": "Hello!",
    "type": "text-delta",
  },
  {
    "source": {
      "id": "456",
      "providerMetadata": {
        "provider": {
          "custom": "value2",
        },
      },
      "sourceType": "url",
      "title": "Example 2",
      "url": "https://example.com/2",
    },
    "type": "source",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send text deltas 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send tool call deltas when toolCallStreaming is enabled 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-streaming-start",
  },
  {
    "argsTextDelta": "{"",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "value",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "":"",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "Spark",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": "le",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": " Day",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "argsTextDelta": ""}",
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call-delta",
  },
  {
    "args": {
      "value": "Sparkle Day",
    },
    "toolCallId": "call_O17Uplv4lJvD6DVdIvFFeRMw",
    "toolName": "test-tool",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "tool-calls",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 17,
      "promptTokens": 53,
      "totalTokens": 70,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send tool calls 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should send tool results 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "args": {
      "value": "value",
    },
    "result": "value-result",
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-result",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.fullStream > should use fallback response metadata when response metadata is not provided 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-2000",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:02.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-2000",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:02.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`streamText > result.mergeIntoDataStream > should merge the result into a data stream 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.mergeIntoDataStream > should use the onError handler from the data stream 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should create a Response with a data stream and custom headers 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should mask error messages by default 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"An error occurred."
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should omit message finish event (d:) when sendFinish is false 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should support custom error messages 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should suppress usage information when sendUsage is false 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should write data stream parts to a Node.js response-like object 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should write file content to a Node.js response-like object 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "k:{"mimeType":"text/plain","data":"Hello World"}
",
  "0:"Hello!"
",
  "k:{"mimeType":"image/jpeg","data":"QkFVRw=="}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should write reasoning content to a Node.js response-like object 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "g:"I will open the conversation"
",
  "g:" with witty banter. "
",
  "j:{"signature":"1234567890"}
",
  "i:{"data":"redacted-reasoning-data"}
",
  "g:"Once the user has relaxed,"
",
  "g:" I will pry for valuable information."
",
  "j:{"signature":"1234567890"}
",
  "0:"Hi"
",
  "0:" there!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.pipeDataStreamToResponse > should write source content to a Node.js response-like object 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "h:{"sourceType":"url","id":"123","url":"https://example.com","title":"Example","providerMetadata":{"provider":{"custom":"value"}}}
",
  "0:"Hello!"
",
  "h:{"sourceType":"url","id":"456","url":"https://example.com/2","title":"Example 2","providerMetadata":{"provider":{"custom":"value2"}}}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.reasoning > should contain reasoning from model response 1`] = `"I will open the conversation with witty banter. Once the user has relaxed, I will pry for valuable information."`;

exports[`streamText > result.reasoningDetails > should contain reasoning from model response 1`] = `
[
  {
    "signature": "1234567890",
    "text": "I will open the conversation with witty banter. ",
    "type": "text",
  },
  {
    "data": "redacted-reasoning-data",
    "type": "redacted",
  },
  {
    "signature": "1234567890",
    "text": "Once the user has relaxed, I will pry for valuable information.",
    "type": "text",
  },
]
`;

exports[`streamText > result.response > should resolve with response information 1`] = `
{
  "headers": {
    "call": "2",
  },
  "id": "id-0",
  "messages": [
    {
      "content": [
        {
          "text": "Hello",
          "type": "text",
        },
      ],
      "id": "msg-0",
      "role": "assistant",
    },
  ],
  "modelId": "mock-model-id",
  "timestamp": 1970-01-01T00:00:00.000Z,
}
`;

exports[`streamText > result.response.messages > should contain reasoning 1`] = `
[
  {
    "content": [
      {
        "signature": "1234567890",
        "text": "I will open the conversation with witty banter. ",
        "type": "reasoning",
      },
      {
        "data": "redacted-reasoning-data",
        "type": "redacted-reasoning",
      },
      {
        "signature": "1234567890",
        "text": "Once the user has relaxed, I will pry for valuable information.",
        "type": "reasoning",
      },
      {
        "text": "Hi there!",
        "type": "text",
      },
    ],
    "id": "msg-0",
    "role": "assistant",
  },
]
`;

exports[`streamText > result.responseMessages > should contain assistant response message and tool message when there are tool calls with results 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "id": "msg-0",
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "id": "msg-1",
    "role": "tool",
  },
]
`;

exports[`streamText > result.responseMessages > should contain assistant response message when there are no tool calls 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "id": "msg-0",
    "role": "assistant",
  },
]
`;

exports[`streamText > result.sources > should contain sources 1`] = `
[
  {
    "id": "123",
    "providerMetadata": {
      "provider": {
        "custom": "value",
      },
    },
    "sourceType": "url",
    "title": "Example",
    "url": "https://example.com",
  },
  {
    "id": "456",
    "providerMetadata": {
      "provider": {
        "custom": "value2",
      },
    },
    "sourceType": "url",
    "title": "Example 2",
    "url": "https://example.com/2",
  },
]
`;

exports[`streamText > result.steps > should add the files from the model response to the step result 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [
      DefaultGeneratedFileWithType {
        "base64Data": "Hello World",
        "mimeType": "text/plain",
        "type": "file",
        "uint8ArrayData": undefined,
      },
      DefaultGeneratedFileWithType {
        "base64Data": "QkFVRw==",
        "mimeType": "image/jpeg",
        "type": "file",
        "uint8ArrayData": undefined,
      },
    ],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "data": "Hello World",
              "mimeType": "text/plain",
              "type": "file",
            },
            {
              "data": "QkFVRw==",
              "mimeType": "image/jpeg",
              "type": "file",
            },
            {
              "text": "Hello!",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "Hello!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > result.steps > should add the reasoning from the model response to the step result 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": "I will open the conversation with witty banter. Once the user has relaxed, I will pry for valuable information.",
    "reasoningDetails": [
      {
        "signature": "1234567890",
        "text": "I will open the conversation with witty banter. ",
        "type": "text",
      },
      {
        "data": "redacted-reasoning-data",
        "type": "redacted",
      },
      {
        "signature": "1234567890",
        "text": "Once the user has relaxed, I will pry for valuable information.",
        "type": "text",
      },
    ],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "signature": "1234567890",
              "text": "I will open the conversation with witty banter. ",
              "type": "reasoning",
            },
            {
              "data": "redacted-reasoning-data",
              "type": "redacted-reasoning",
            },
            {
              "signature": "1234567890",
              "text": "Once the user has relaxed, I will pry for valuable information.",
              "type": "reasoning",
            },
            {
              "text": "Hi there!",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [],
    "stepType": "initial",
    "text": "Hi there!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > result.steps > should add the sources from the model response to the step result 1`] = `
[
  {
    "experimental_providerMetadata": undefined,
    "files": [],
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "providerMetadata": undefined,
    "reasoning": undefined,
    "reasoningDetails": [],
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "messages": [
        {
          "content": [
            {
              "text": "Hello!",
              "type": "text",
            },
          ],
          "id": "msg-0",
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "sources": [
      {
        "id": "123",
        "providerMetadata": {
          "provider": {
            "custom": "value",
          },
        },
        "sourceType": "url",
        "title": "Example",
        "url": "https://example.com",
      },
      {
        "id": "456",
        "providerMetadata": {
          "provider": {
            "custom": "value2",
          },
        },
        "sourceType": "url",
        "title": "Example 2",
        "url": "https://example.com/2",
      },
    ],
    "stepType": "initial",
    "text": "Hello!",
    "toolCalls": [],
    "toolResults": [],
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
]
`;

exports[`streamText > result.text > should resolve with full text 1`] = `"Hello, world!"`;

exports[`streamText > result.textStream > should filter out empty text deltas 1`] = `
[
  "Hello",
  ", ",
  "world!",
]
`;

exports[`streamText > result.textStream > should not include reasoning content in textStream 1`] = `
[
  "Hi",
  " there!",
]
`;

exports[`streamText > result.textStream > should swallow error to prevent server crash 1`] = `[]`;

exports[`streamText > result.toDataStream > should create a data stream 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should mask error messages by default 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"An error occurred."
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.toDataStream > should omit message finish event (d:) when sendFinish is false 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
]
`;

exports[`streamText > result.toDataStream > should send file content 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "k:{"mimeType":"text/plain","data":"Hello World"}
",
  "0:"Hello!"
",
  "k:{"mimeType":"image/jpeg","data":"QkFVRw=="}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should send reasoning content when sendReasoning is true 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "g:"I will open the conversation"
",
  "g:" with witty banter. "
",
  "j:{"signature":"1234567890"}
",
  "i:{"data":"redacted-reasoning-data"}
",
  "g:"Once the user has relaxed,"
",
  "g:" I will pry for valuable information."
",
  "j:{"signature":"1234567890"}
",
  "0:"Hi"
",
  "0:" there!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should send source content when sendSources is true 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "h:{"sourceType":"url","id":"123","url":"https://example.com","title":"Example","providerMetadata":{"provider":{"custom":"value"}}}
",
  "0:"Hello!"
",
  "h:{"sourceType":"url","id":"456","url":"https://example.com/2","title":"Example 2","providerMetadata":{"provider":{"custom":"value2"}}}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should send tool call and tool result stream parts 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "9:{"toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}
",
  "a:{"toolCallId":"call-1","result":"value-result"}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should send tool call, tool call stream start, tool call deltas, and tool result stream parts when tool call delta flag is enabled 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "b:{"toolCallId":"call-1","toolName":"tool1"}
",
  "c:{"toolCallId":"call-1","argsTextDelta":"{ \\"value\\":"}
",
  "c:{"toolCallId":"call-1","argsTextDelta":" \\"value\\" }"}
",
  "9:{"toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}
",
  "a:{"toolCallId":"call-1","result":"value-result"}
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should support custom error messages 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.toDataStream > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStream > should suppress usage information when sendUsage is false 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should create a Response with a data stream 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should create a Response with a data stream and custom headers 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should mask error messages by default 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"An error occurred."
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should support custom error messages 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "3:"custom error message: error"
",
  "e:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0},"isContinued":false}
",
  "d:{"finishReason":"error","usage":{"promptTokens":0,"completionTokens":0}}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should support merging with existing stream data 1`] = `
[
  "2:["stream-data-value"]
",
  "f:{"messageId":"msg-0"}
",
  "0:"Hello"
",
  "0:", "
",
  "0:"world!"
",
  "e:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10},"isContinued":false}
",
  "d:{"finishReason":"stop","usage":{"promptTokens":3,"completionTokens":10}}
",
]
`;

exports[`streamText > result.toDataStreamResponse > should suppress usage information when sendUsage is false 1`] = `
[
  "f:{"messageId":"msg-0"}
",
  "0:"Hello, World!"
",
  "e:{"finishReason":"stop","isContinued":false}
",
  "d:{"finishReason":"stop"}
",
]
`;

exports[`streamText > telemetry > should not record any telemetry data when not explicitly enabled 1`] = `[]`;

exports[`streamText > telemetry > should not record telemetry inputs / outputs when disabled 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.response.finishReason": "stop",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`streamText > telemetry > should record successful tool call 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.text": "",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "operation.name": "ai.streamText",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.prompt.toolChoice": "{"type":"auto"}",
      "ai.prompt.tools": [
        "{"type":"function","name":"tool1","parameters":{"type":"object","properties":{"value":{"type":"string"}},"required":["value"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}",
      ],
      "ai.response.avgCompletionTokensPerSecond": 40,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"type":"tool-call","toolCallId":"call-1","toolName":"tool1","args":{"value":"value"}}]",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 20,
      "ai.usage.promptTokens": 10,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 10,
      "gen_ai.usage.output_tokens": 20,
      "operation.name": "ai.streamText.doStream",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""value-result"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`streamText > telemetry > should record telemetry data when enabled 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "operation.name": "ai.streamText test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.streamText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.streamText.doStream",
      "ai.prompt.format": "prompt",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.avgCompletionTokensPerSecond": 20,
      "ai.response.finishReason": "stop",
      "ai.response.id": "id-0",
      "ai.response.model": "mock-model-id",
      "ai.response.msToFinish": 500,
      "ai.response.msToFirstChunk": 100,
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxRetries": 2,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.frequency_penalty": 0.3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.request.presence_penalty": 0.4,
      "gen_ai.request.stop_sequences": [
        "stop",
      ],
      "gen_ai.request.temperature": 0.5,
      "gen_ai.request.top_k": 0.1,
      "gen_ai.request.top_p": 0.2,
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "id-0",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.streamText.doStream test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [
      {
        "attributes": {
          "ai.response.msToFirstChunk": 100,
        },
        "name": "ai.stream.firstChunk",
      },
      {
        "attributes": undefined,
        "name": "ai.stream.finish",
      },
    ],
    "name": "ai.streamText.doStream",
  },
]
`;

exports[`streamText > tools with custom schema > should send tool calls 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "args": {
      "value": "value",
    },
    "toolCallId": "call-1",
    "toolName": "tool1",
    "type": "tool-call",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;
