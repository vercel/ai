// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`options.maxSteps > 2 steps: initial, tool-result > onStepFinish should be called for each step 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "finishReason": "tool-calls",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "test-id-1-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 10,
      "outputTokens": 5,
      "reasoningTokens": undefined,
      "totalTokens": 15,
    },
    "warnings": [],
  },
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": {
        "custom-response-header": "response-header-value",
      },
      "id": "test-id-2-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:10.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > result.response.messages should contain response messages from all steps 1`] = `
[
  {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "role": "tool",
  },
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result > result.steps should contain all steps 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "finishReason": "tool-calls",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "test-id-1-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 10,
      "outputTokens": 5,
      "reasoningTokens": undefined,
      "totalTokens": 15,
    },
    "warnings": [],
  },
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": {
        "custom-response-header": "response-header-value",
      },
      "id": "test-id-2-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:10.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result with prepareStep > onStepFinish should be called for each step 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "finishReason": "tool-calls",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "test-id-1-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 10,
      "outputTokens": 5,
      "reasoningTokens": undefined,
      "totalTokens": 15,
    },
    "warnings": [],
  },
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": {
        "custom-response-header": "response-header-value",
      },
      "id": "test-id-2-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:10.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result with prepareStep > result.response.messages should contain response messages from all steps 1`] = `
[
  {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "role": "tool",
  },
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`options.maxSteps > 2 steps: initial, tool-result with prepareStep > result.steps should contain all steps 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
      {
        "args": {
          "value": "value",
        },
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "finishReason": "tool-calls",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "test-id-1-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 10,
      "outputTokens": 5,
      "reasoningTokens": undefined,
      "totalTokens": 15,
    },
    "warnings": [],
  },
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": {
        "custom-response-header": "response-header-value",
      },
      "id": "test-id-2-from-model",
      "messages": [
        {
          "content": [
            {
              "args": {
                "value": "value",
              },
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-call",
            },
          ],
          "role": "assistant",
        },
        {
          "content": [
            {
              "result": "result1",
              "toolCallId": "call-1",
              "toolName": "tool1",
              "type": "tool-result",
            },
          ],
          "role": "tool",
        },
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "test-response-model-id",
      "timestamp": 1970-01-01T00:00:10.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`result.files > should contain files 1`] = `
[
  DefaultGeneratedFile {
    "base64Data": "AQID",
    "mediaType": "image/png",
    "uint8ArrayData": Uint8Array [
      1,
      2,
      3,
    ],
  },
  DefaultGeneratedFile {
    "base64Data": "QkFVRw==",
    "mediaType": "image/jpeg",
    "uint8ArrayData": undefined,
  },
]
`;

exports[`result.response > should contain response body and headers 1`] = `
{
  "body": "test body",
  "headers": {
    "custom-response-header": "response-header-value",
  },
  "id": "test-id-from-model",
  "messages": [
    {
      "content": [
        {
          "text": "Hello, world!",
          "type": "text",
        },
      ],
      "role": "assistant",
    },
  ],
  "modelId": "test-response-model-id",
  "timestamp": 1970-01-01T00:00:10.000Z,
}
`;

exports[`result.response > should contain response body and headers 2`] = `
{
  "body": "test body",
  "headers": {
    "custom-response-header": "response-header-value",
  },
  "id": "test-id-from-model",
  "messages": [
    {
      "content": [
        {
          "text": "Hello, world!",
          "type": "text",
        },
      ],
      "role": "assistant",
    },
  ],
  "modelId": "test-response-model-id",
  "timestamp": 1970-01-01T00:00:10.000Z,
}
`;

exports[`result.response.messages > should contain assistant response message and tool message when there are tool calls with results 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
      {
        "args": {
          "value": "value",
        },
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-call",
      },
    ],
    "role": "assistant",
  },
  {
    "content": [
      {
        "result": "result1",
        "toolCallId": "call-1",
        "toolName": "tool1",
        "type": "tool-result",
      },
    ],
    "role": "tool",
  },
]
`;

exports[`result.response.messages > should contain assistant response message when there are no tool calls 1`] = `
[
  {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`result.response.messages > should contain reasoning 1`] = `
[
  {
    "content": [
      {
        "providerOptions": {
          "testProvider": {
            "signature": "signature",
          },
        },
        "text": "I will open the conversation with witty banter.",
        "type": "reasoning",
      },
      {
        "providerOptions": {
          "testProvider": {
            "redactedData": "redacted-reasoning-data",
          },
        },
        "text": "",
        "type": "reasoning",
      },
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "role": "assistant",
  },
]
`;

exports[`result.sources > should contain sources 1`] = `
[
  {
    "id": "123",
    "providerMetadata": {
      "provider": {
        "custom": "value",
      },
    },
    "sourceType": "url",
    "title": "Example",
    "type": "source",
    "url": "https://example.com",
  },
  {
    "id": "456",
    "providerMetadata": {
      "provider": {
        "custom": "value2",
      },
    },
    "sourceType": "url",
    "title": "Example 2",
    "type": "source",
    "url": "https://example.com/2",
  },
]
`;

exports[`result.steps > should add the reasoning from the model response to the step result 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "providerMetadata": {
          "testProvider": {
            "signature": "signature",
          },
        },
        "text": "I will open the conversation with witty banter.",
        "type": "reasoning",
      },
      {
        "providerMetadata": {
          "testProvider": {
            "redactedData": "redacted-reasoning-data",
          },
        },
        "text": "",
        "type": "reasoning",
      },
      {
        "text": "Hello, world!",
        "type": "text",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "providerOptions": {
                "testProvider": {
                  "signature": "signature",
                },
              },
              "text": "I will open the conversation with witty banter.",
              "type": "reasoning",
            },
            {
              "providerOptions": {
                "testProvider": {
                  "redactedData": "redacted-reasoning-data",
                },
              },
              "text": "",
              "type": "reasoning",
            },
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`result.steps > should contain files 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
      {
        "file": DefaultGeneratedFile {
          "base64Data": "AQID",
          "mediaType": "image/png",
          "uint8ArrayData": Uint8Array [
            1,
            2,
            3,
          ],
        },
        "type": "file",
      },
      {
        "file": DefaultGeneratedFile {
          "base64Data": "QkFVRw==",
          "mediaType": "image/jpeg",
          "uint8ArrayData": undefined,
        },
        "type": "file",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
            {
              "data": "AQID",
              "mediaType": "image/png",
              "type": "file",
            },
            {
              "data": "QkFVRw==",
              "mediaType": "image/jpeg",
              "type": "file",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`result.steps > should contain sources 1`] = `
[
  DefaultStepResult {
    "content": [
      {
        "text": "Hello, world!",
        "type": "text",
      },
      {
        "id": "123",
        "providerMetadata": {
          "provider": {
            "custom": "value",
          },
        },
        "sourceType": "url",
        "title": "Example",
        "type": "source",
        "url": "https://example.com",
      },
      {
        "id": "456",
        "providerMetadata": {
          "provider": {
            "custom": "value2",
          },
        },
        "sourceType": "url",
        "title": "Example 2",
        "type": "source",
        "url": "https://example.com/2",
      },
    ],
    "finishReason": "stop",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "body": undefined,
      "headers": undefined,
      "id": "id-0",
      "messages": [
        {
          "content": [
            {
              "text": "Hello, world!",
              "type": "text",
            },
          ],
          "role": "assistant",
        },
      ],
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "usage": {
      "cachedInputTokens": undefined,
      "inputTokens": 3,
      "outputTokens": 10,
      "reasoningTokens": undefined,
      "totalTokens": 13,
    },
    "warnings": [],
  },
]
`;

exports[`result.text > should generate text 1`] = `[]`;

exports[`telemetry > should not record any telemetry data when not explicitly enabled 1`] = `[]`;

exports[`telemetry > should not record telemetry inputs / outputs when disabled 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.response.finishReason": "stop",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "operation.name": "ai.generateText",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.response.finishReason": "stop",
      "ai.response.id": "test-id",
      "ai.response.model": "mock-model-id",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "test-id",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.generateText.doGenerate",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record successful tool call 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.prompt": "{"prompt":"test-input"}",
      "ai.response.finishReason": "stop",
      "ai.response.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "operation.name": "ai.generateText",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"test-input"}]}]",
      "ai.prompt.toolChoice": "{"type":"auto"}",
      "ai.prompt.tools": [
        "{"type":"function","name":"tool1","parameters":{"type":"object","properties":{"value":{"type":"string"}},"required":["value"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}",
      ],
      "ai.response.finishReason": "stop",
      "ai.response.id": "test-id",
      "ai.response.model": "mock-model-id",
      "ai.response.timestamp": "1970-01-01T00:00:00.000Z",
      "ai.response.toolCalls": "[{"toolCallType":"function","toolCallId":"call-1","toolName":"tool1","args":"{ \\"value\\": \\"value\\" }"}]",
      "ai.settings.maxRetries": 2,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "test-id",
      "gen_ai.response.model": "mock-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.generateText.doGenerate",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
  {
    "attributes": {
      "ai.operationId": "ai.toolCall",
      "ai.toolCall.args": "{"value":"value"}",
      "ai.toolCall.id": "call-1",
      "ai.toolCall.name": "tool1",
      "ai.toolCall.result": ""result1"",
      "operation.name": "ai.toolCall",
    },
    "events": [],
    "name": "ai.toolCall",
  },
]
`;

exports[`telemetry > should record telemetry data when enabled 1`] = `
[
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText",
      "ai.prompt": "{"prompt":"prompt"}",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.text": "Hello, world!",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxRetries": 2,
      "ai.settings.maxSteps": 1,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "operation.name": "ai.generateText test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.generateText",
  },
  {
    "attributes": {
      "ai.model.id": "mock-model-id",
      "ai.model.provider": "mock-provider",
      "ai.operationId": "ai.generateText.doGenerate",
      "ai.prompt.messages": "[{"role":"user","content":[{"type":"text","text":"prompt"}]}]",
      "ai.request.headers.header1": "value1",
      "ai.request.headers.header2": "value2",
      "ai.response.finishReason": "stop",
      "ai.response.id": "test-id-from-model",
      "ai.response.model": "test-response-model-id",
      "ai.response.text": "Hello, world!",
      "ai.response.timestamp": "1970-01-01T00:00:10.000Z",
      "ai.settings.frequencyPenalty": 0.3,
      "ai.settings.maxRetries": 2,
      "ai.settings.presencePenalty": 0.4,
      "ai.settings.stopSequences": [
        "stop",
      ],
      "ai.settings.temperature": 0.5,
      "ai.settings.topK": 0.1,
      "ai.settings.topP": 0.2,
      "ai.telemetry.functionId": "test-function-id",
      "ai.telemetry.metadata.test1": "value1",
      "ai.telemetry.metadata.test2": false,
      "ai.usage.completionTokens": 10,
      "ai.usage.promptTokens": 3,
      "gen_ai.request.frequency_penalty": 0.3,
      "gen_ai.request.model": "mock-model-id",
      "gen_ai.request.presence_penalty": 0.4,
      "gen_ai.request.stop_sequences": [
        "stop",
      ],
      "gen_ai.request.temperature": 0.5,
      "gen_ai.request.top_k": 0.1,
      "gen_ai.request.top_p": 0.2,
      "gen_ai.response.finish_reasons": [
        "stop",
      ],
      "gen_ai.response.id": "test-id-from-model",
      "gen_ai.response.model": "test-response-model-id",
      "gen_ai.system": "mock-provider",
      "gen_ai.usage.input_tokens": 3,
      "gen_ai.usage.output_tokens": 10,
      "operation.name": "ai.generateText.doGenerate test-function-id",
      "resource.name": "test-function-id",
    },
    "events": [],
    "name": "ai.generateText.doGenerate",
  },
]
`;
